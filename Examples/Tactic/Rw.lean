/- # rw

`rw` は rewrite（書き換え）を行うタクティクです．等式や同値をもとに書き換えを行います．

`hab: a = b` や `hPQ : P ↔ Q` がローカルコンテキストにあるとき，

* `rw [hab]` はゴールの中の `a` をすべて `b` に置き換え，
* `rw [hPQ]` はゴールの中の `P` をすべて `Q` に置き換えます．

順番は重要で，`b` を `a` に置き換えたいときなどは `rw [← hab]` のように `←` をつけます．

`h1, h2, ...` について続けて置き換えを行いたいときは，`rw [h1, h2, ...]` のようにします．

ゴールではなく，ローカルコンテキストにある `h: P` を書き換えたいときには `at` をつけて `rw [hPQ] at h` とします．すべての箇所で置き換えたいときは `rw [hPQ] at *` とします． -/
example (a b c d e f : Nat) (h : a * b = c * d) (h' : e = f) :
    a * (b * e) = c * (d * f) := by
  rw [h']

  -- 結合法則を使う
  rw [← Nat.mul_assoc]
  rw [h]

  -- 結合法則を使う
  rw [Nat.mul_assoc]

/-! ## nth_rw

`rw` はマッチした項をすべて置き換えてしまいます．
特定の項だけを書き換えたいとき，[nth_rw](./NthRw.md) が使用できます.
-/

/-! ## rewrite

`rewrite` というタクティクもあります．`rw` とよく似ていて，違いは `rw` が書き換え後に自動的に `rfl` を実行するのに対して，`rewrite` は行わないということです．-/
